<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">
	<os:config name="ObjectStore_Config" doc:name="ObjectStore Config" doc:id="f475f65a-5ded-44e2-abd7-e3b93af0c2e8" />
	<os:object-store name="Object_store" doc:name="Object store" doc:id="7d42b26d-16be-48dc-9916-1bb3f1740a20" maxEntries="5000" entryTtl="1" expirationInterval="60" config-ref="ObjectStore_Config" />
	<flow name="get_companies" doc:id="3a701fb8-edfc-4533-95d0-6f94ff5b31c5" >
		<batch:job jobName="CompaniesBatchProccess" doc:id="ac95b4db-3c7f-4484-8790-d3c2ea554c06" >
			<batch:process-records >
				<batch:step name="Batch_Step" doc:id="d73e1a6b-1078-44d1-a218-5b73692a0a89" >
					<file:read doc:name="Read Companies" doc:id="c0470c1f-ec80-4f92-a33f-bab114f7a06d" config-ref="File_Config" path="E:\ynestero\training.mule\FTP\companies.csv">
			<ee:repeatable-file-store-stream bufferUnit="MB" />
			<reconnect />
		</file:read>
				</batch:step>
			</batch:process-records>
			<batch:on-complete >
				<ee:transform doc:name="Filter companies" doc:id="4ad2accc-5aed-4fad-b788-a8a126482366">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
fun isDuplicatedId(company_id) = payload filter ((item, index) -> item.company_id == company_id)
fun isDuplicatedName(company_name) = payload filter ((item, index) -> item.company_name == company_name)
---
(payload map {
    company_id: $.company_id,
    company_name: $.company_name,
    isCompanyIdDuplicated: sizeOf(isDuplicatedId($.company_id))>1,
    isCompanyNameDuplicated: sizeOf(isDuplicatedName($.company_name))>1
} filter ($.isCompanyIdDuplicated == false and  $.isCompanyNameDuplicated == false) 
) map {
    Name: $.company_name,
    external_id__c: $.company_id,
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
				<os:store doc:name="Company store" doc:id="deef27c1-383d-4d3f-846c-11b05c5e94cf" key="external_id__c" objectStore="Object_store"/>
			</batch:on-complete>
		</batch:job>
		<logger level="INFO" doc:name="Logger" doc:id="13ebe279-4f05-442f-b2bd-bde3175fc241" message="#[payload]"/>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="c4ae0226-7995-4e80-a1c4-00d1f458c670" >
				<logger level="ERROR" doc:name="Logger" doc:id="7eb35851-006d-47ad-bddd-b5ca2a703dae" message="#[payload]"/>
				<ee:transform doc:name="Transform Message" doc:id="a930a3fe-cade-478f-bf02-49c44249612e" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/text
---
"File is demaged, please check file 'companies.csv'"]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="get_addresses" doc:id="1bb5e6c5-f5d6-4b68-a346-7c86ff478e67" >
		<file:read doc:name="Read Addresses" doc:id="8a97557c-34db-4040-a886-364eef97f09e" config-ref="File_Config" path="E:\ynestero\training.mule\FTP\addresses.csv">
			<ee:repeatable-file-store-stream bufferUnit="MB" />
		</file:read>
		<ee:transform doc:name="Parse Addresses" doc:id="9965a3c3-c398-4797-9b01-2e0a3f950a10" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Filter Addresses" doc:id="5f54930d-419d-4884-b575-d260cc182c70">
			<ee:message>
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
fun unMatch(company_id) = vars.companies filter (item, index) -> item.external_id__c == company_id
---
(payload map {
    company_id: $.company_id,
    BillingAddress__c: $.address,
    BillingCity__c: $.city,
    BillingCountry__c: $.county,
    PostalCode__c: $.zip,
    doesAddressExistForCompany: sizeOf(unMatch($.company_id))>0
} filter ($.doesAddressExistForCompany == true and $.company_id != null)) map {
	Name: unMatch($.company_id)[0].Name,
    BillingAddress__c: $.BillingAddress__c,
    BillingCity__c: $.BillingCity__c,
    BillingCountry__c: $.BillingCountry__c,
    PostalCode__c: $.PostalCode__c,
    external_id__c: $.company_id
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="noCompaniesAddresses" ><![CDATA[%dw 2.0
output application/json
fun unMatch(company_id) = payload filter (item, index) -> item.company_id == company_id
---
payload distinctBy ($.company_id) map {
    company_id: $.company_id,
    doesAccountExistForEvent: sizeOf(unMatch($.company_id))>0
} filter ($.doesAccountExistForEvent == false and $.company_id != null) map {
	BillingCity: $.city,
	BillingContry: $.country,
	
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="4f3df55b-25b0-42c3-917b-8516c57dcd23" message="#[payload]"/>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="69c528f7-6a75-4fe0-8753-a3566f742676" >
				<logger level="ERROR" doc:name="Logger" doc:id="4b7b5224-dc7c-43c6-90e8-71273152ea34" message="#[payload]" />
				<ee:transform doc:name="Transform Message" doc:id="420c6025-620d-44e6-886b-179a588d5b74" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/text
---
"File is demaged, please check file 'addresses.csv'"]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="get_events" doc:id="f5ec48fd-bf1b-49ad-a9a7-17da22e6780a" >
		<file:read doc:name="Read Events" doc:id="d469e32d-168d-43da-8050-002fe5e7ed78" config-ref="File_Config" path="E:\ynestero\training.mule\FTP\events.xml" target="events"/>
		<ee:transform doc:name="Transform Message" doc:id="854ca7bf-2372-4ff9-8df3-e44b7085f107" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.events.root.*row]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="events" ><![CDATA[%dw 2.0
output application/json
---
vars.events.root.*row]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="Filter Events" doc:id="24499614-651d-4797-b879-7c930ce9a734">
			<ee:message>
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
fun normalize(event_date) = (event_date) replace "/" with "-" replace "." with "-"
fun getSfId(company_id) = vars.bulkSuccessfullResult filter (item, index) -> item.originalFields.external_id__c == company_id
---
vars.events filter ($.company_id != "" and $.company_id != "0" and $.company_id != null 
and $.event_type != "" and $.event_type != "0" and $.event_type != null
and $.event_date != "" and $.event_date != "0" and $.event_date != null 
and $.event_date as Date {format: "M/d/yyyy"} > "12/31/2008" as Date {format: "M/d/yyy"}
) map {
    Subject: $.event_type,
    WhatId: getSfId($.company_id).id[0],
    StartDateTime: normalize($.event_date as Date {format: "M/d/yyy"} as String {format: 'yyyy-MM-dd'}) ++ "T15:00:00.000Z",
    EndDateTime: normalize($.event_date as Date {format: "M/d/yyy"} as String {format: 'yyyy-MM-dd'}) ++ "T16:00:00.000Z"
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="noCompanyEvents" ><![CDATA[%dw 2.0
output application/json
fun unMatch(company_id) = payload filter (item, index) -> item.company_id == company_id
---
vars.events.root.*row map {
    company_id: $.company_id,
    event_type: $.event_type,
    event_date: $.event_date,
    doesAccountExistForEvent: sizeOf(unMatch($.company_id))>0
} filter ($.doesAccountExistForEvent == false and $.company_id != null)]]></ee:set-variable>
				<ee:set-variable variableName="emptyFieldsEvents" ><![CDATA[%dw 2.0
output application/json
---
vars.events.root.*row filter (item, index) -> 
	item.company_id == null 
or item.event_date == null 
or item.event_type == null]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="d9bc9355-b743-409e-b781-3488ff56d97d" message="#[payload]"/>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="f87a2a88-c9d2-444e-ad7f-af93e5ed658e" >
				<logger level="ERROR" doc:name="Logger" doc:id="50cc21fb-7de9-4d91-b924-2a0be39ba85a" message="#[payload]" />
				<ee:transform doc:name="Transform Message" doc:id="6d0f554d-7ce1-445a-b620-e9250e4b72a4" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/text
---
"File is demaged, please check file 'events.xml'"]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="retrieve_failed_records" doc:id="b66e511f-7d0b-4f9e-998e-ee65a416cf99" >
		<salesforce:retrieve-job-failed-results-bulk-v2 doc:name="Retrieve job failed results bulk v 2" doc:id="d185d93d-bdbd-4921-a3f4-1877989d9e93" config-ref="Salesforce_Config" id="#[vars.jobID]" target="bulkFailedResult" />
		<ee:transform doc:name="Failed Results" doc:id="686f3a2a-221c-4162-949e-a644d594c2fd">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
vars.bulkFailedResult]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<choice doc:name="Choice" doc:id="60986cab-b139-460b-b4a7-228e446d8ca4" >
			<when expression="#[sizeOf(payload) == 0]">
				<logger level="INFO" doc:name="Logger" doc:id="b8a29f25-c68d-4d88-9837-ab65c6bd9a46" />
			</when>
			<otherwise >
				<ee:transform doc:name="Message" doc:id="479c1be3-b0ff-497d-ab31-66ad7217e960">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="message"><![CDATA[%dw 2.0
output application/json
---
{
Type__c: 'FAIL',
Message__c: "Records with External IDs below - are not valid: \n" ++ (payload.originalFields.external_id__c joinBy  "\n ")
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
				<salesforce:create doc:name="Create" doc:id="df26591a-3b91-46fd-a00b-1276eaf3caae" config-ref="Salesforce_Config" type="Data_Migration_Log__c">
			<salesforce:records><![CDATA[#[vars.message]]]></salesforce:records>
		</salesforce:create>
			</otherwise>
		</choice>
	</flow>
	<flow name="retrieve_successful_records" doc:id="9a042c7f-41f2-4485-b60a-f293806cbf7e" >
		<salesforce:retrieve-job-successful-results-bulk-v2 doc:name="Retrieve job successful results bulk v 2" doc:id="8fab9760-a9a6-4428-83bf-bfaa17ee1444" config-ref="Salesforce_Config" id="#[vars.jobID]" target="bulkSuccessfullResult"/>
		<ee:transform doc:name="Successfull Results" doc:id="91115308-83c3-42bf-94b8-b32458ff276b">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
vars.bulkSuccessfullResult]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="post_records" doc:id="aaf95659-ee4a-4ed5-8848-f148f48bd02b" >
		<logger level="INFO" doc:name="Logger" doc:id="239ef6c9-c7ff-4009-8862-5af9c7bba793" message="#[payload]"/>
		<choice doc:name="Choice" doc:id="1ba8bacf-a60a-419e-84b2-62ce47d42b2c">
			<when expression='#[vars.objectName == "Event"]'>
				<ee:transform doc:name="Events Mapping" doc:id="18022952-aec1-4abe-87ba-dc5e389ae2ba">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/csv lineSeparator="\n", quoteValues=true
---
vars.events]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<salesforce:create-job-bulk-api-v2 objectType="#[vars.objectName]" operation="insert" doc:name="Map Object" doc:id="408e2f85-ccd1-412c-ba58-a7440bb29871" config-ref="Salesforce_Config" target="jobResult" />
			</when>
			<when expression='#[vars.objectName == "Account"]'>
				<ee:transform doc:name="Companies Mapping" doc:id="8cdb78b4-7f35-4a79-bdfd-e3d80f14baab">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/csv lineSeparator="\n", quoteValues=true
---
vars.addresses_companies]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<salesforce:create-job-bulk-api-v2 objectType="#[vars.objectName]" operation="upsert" doc:name="Map Object" doc:id="49f8d1e6-d194-4d7d-8b0f-84adc2a63497" config-ref="Salesforce_Config" target="jobResult" externalIdFieldName="external_id__c">
		</salesforce:create-job-bulk-api-v2>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" doc:id="b5032ffb-a359-4f8b-8901-be5a7f13a5f6" message="#[payload]" />
			</otherwise>
		</choice>
		<ee:transform doc:name="Transform Message" doc:id="dcc74e72-2cc0-492e-91e3-6a3e94fb02c5">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
vars.jobResult]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-variable doc:name="Set Variable" doc:id="fe360ecd-cac2-44c6-a5c8-5b17eacfd1ab" variableName="jobID" value="#[payload.id[0 to (sizeOf(payload.id)-4)] as String]" />
		<flow-ref doc:name="Get Bulk Result" doc:id="236144f7-2521-45f4-bb97-6ce8267060c4" name="get_bulk_result"/>
	</flow>
	<flow name="get_bulk_result" doc:id="e2d79493-78e7-4e42-86e2-e2b2d1c04df4" >
		<until-successful maxRetries="200" doc:name="Until Successful" doc:id="a5626d03-4c34-4d6f-83a0-8eb43097792c" millisBetweenRetries="5000" >
			<ee:transform doc:name="Transform Message" doc:id="8f66ab11-d9b1-4541-a21b-7e35e963ada7">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="statusError"><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
			<salesforce:get-job-state-bulk-api-v2 doc:name="Get job status" doc:id="90ac9399-785d-4e65-a347-d93453adcf87" config-ref="Salesforce_Config" id="#[vars.jobID]" target="jobStatus" />
			<choice doc:name="Choice" doc:id="f895590e-c668-4bcb-844f-9d81b93fe5f2">
			<when expression='#[vars.jobStatus.state == "InProgress"]'>
					<raise-error doc:name="Raise error" doc:id="838b413f-d033-4e4b-93da-8e697c8cb295" type="SALESFORCE_JOB:INPROGRESS"/>
			</when>
			<when expression='#[vars.jobStatus.state == "Failed"]'>
				<logger level="ERROR" doc:name="Logger" doc:id="b2988b50-e43c-40b0-b514-1d1f4d3eda68" message='#[%dw 2.0
output application/json
---
payload]' />
					<ee:transform doc:name="Transform Message" doc:id="2d39eea8-9cc9-41f0-b644-b20e676c9149" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
			</when>
			<otherwise>
				<flow-ref doc:name="get_failed_records" doc:id="e09f12e0-bc1c-41d7-96a6-d2020f457737" name="retrieve_failed_records" />
				<flow-ref doc:name="get_successful_records" doc:id="6c89689b-18b7-4c4f-bf8b-b9b5aeddc7c2" name="retrieve_successful_records" />
			</otherwise>
		</choice>
		</until-successful>
	</flow>
</mule>
